server {
	listen  5000;
	server_name  localhost;

	set $music_path '/root/miuzcServer/';
	#set $music_path '/root/mstream/music/';
	set $lyric_path '/root/mstream/lyric/';

	location /music {
		autoindex on;
		autoindex_format json;
		autoindex_exact_size off;

		alias $music_path;
	}

	location /lyric {
		autoindex on;
		autoindex_format json;
		autoindex_exact_size off;

		alias $lyric_path;
	}

	location /test {
		add_header Content-Type text/plain;
		client_max_body_size 100m;
		client_body_buffer_size 16k;
		content_by_lua_file /root/miuzcServer/test.lua;
	}
	
	location /upload/music {
		client_max_body_size 100m;
		client_body_buffer_size 16k;

		content_by_lua_block {  
							local upload = require "resty.upload"  
							local chunk_size = 4096  
							local form, err = upload:new(chunk_size)  
							if not form then  
									ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR  
									ngx.say("failed to new upload: ", err)  
									return  
							end  

							local file_name = nil  
							local file_path = ngx.var.music_path -- 保存文件的目录  

							form:set_timeout(10000) -- 设置超时时间  

							while true do  
									local typ, res, err = form:read()  
									if not typ then  
											ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR  
											ngx.say("failed to read: ", err)  
											return  
									end  

									if typ == "header" then  
											local key = res[1]  
											local value = res[2]  
											if key == "content-disposition" then  
													local _, _, filename = string.find(value, 'filename="([^"]+)"')  
													if filename then  
															file_name = filename  
													end  
											end  
									elseif typ == "body" then 
						ngx.say(file_path .. file_name)	
											if file_name then  
													local file_path_full = file_path .. file_name  
													local file, err = io.open(file_path_full, "wb")  
													if not file then  
															ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR  
															ngx.say("failed to open file: ", err)  
															return  
													end  
													file:write(res)  
													file:close()  
											end  
									elseif typ == "part_end" then  
											file_name = nil -- 重置文件名，等待下一个part  
									elseif typ == "eof" then  
											break  
									else  
											ngx.log(ngx.ERR, "unknown type: ", typ)  
									end  
							end  

							ngx.say("File uploaded successfully.")  
					} 		
	}

	error_page 500 403 404 /;
	location / {
		return 408;
	}
}
